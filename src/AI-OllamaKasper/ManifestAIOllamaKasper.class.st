"
# Package: AI-OllamaKasper

## Overview

The `AI-OllamaKasper` package is designed to integrate AI capabilities into the Pharo programming environment, specifically focusing on generating and managing comments for classes and methods. This package leverages advanced AI models to provide intelligent, context-aware comments, enhancing code readability and maintainability.

## Key Features

### AI-Based Comment Generation

The package includes classes and methods that utilize AI models to generate comments for classes, instance variables, and methods. This is achieved through the `AI_CommentBuilding` class, which interfaces with AI models to produce meaningful comments based on the code structure and context.

### Package and Class Representation

The `AI_PackagesAsOllamaSystem` class is responsible for converting package and class information into a format that can be understood by AI models. This includes generating a detailed representation of classes, their instance variables, and methods, which is then used to generate comments.

### Testing and Validation

The package includes a comprehensive suite of tests to ensure the correctness and reliability of the AI-generated comments. The `AI_CommentBuildingTest` class contains various tests that validate the comment generation process, ensuring that comments are accurate and contextually relevant.

### Integration with Pharo

The package is seamlessly integrated into the Pharo environment, allowing developers to easily generate and update comments for their code. The `Behavior` class has been extended to include a method for adding AI-based comments, making it straightforward to enhance existing codebases with AI-generated documentation.

## Detailed Class Descriptions

### AI_CommentBuilding

This class is the core of the package, responsible for generating comments for classes and methods. It interfaces with AI models to produce comments based on the code structure and context.

- **Instance Variables:**
  - `classObj`: The class for which comments are being generated.
  - `methodsToComment`: The methods for which comments are being generated.
  - `system`: The system prompt used by the AI model.
  - `prompt`: The prompt used by the AI model.

- **Key Methods:**
  - `aiCommentedMethod:`: Generates a comment for a single method.
  - `aiCommentedMethods`: Generates comments for all methods in `methodsToComment`.
  - `extendClassWithComments`: Extends a class with AI-generated comments for its methods and instance variables.

### AI_PackagesAsOllamaSystem

This class is responsible for converting package and class information into a format that can be understood by AI models. It generates a detailed representation of classes, their instance variables, and methods.

- **Instance Variables:**
  - `responce`: The response generated by the class.

- **Key Methods:**
  - `for:`: Generates a representation for a list of packages.
  - `forClass:`: Generates a representation for a single class.
  - `forClasses:`: Generates a representation for a list of classes.

### AI_CommentBuildingTest

This class contains tests to validate the comment generation process. It ensures that comments are accurate and contextually relevant.

- **Instance Variables:**
  - `commentBuilder`: An instance of `AI_CommentBuilding` used for testing.

- **Key Methods:**
  - `testAddCommentToUncommented`: Tests the addition of comments to uncommented methods.
  - `testAiCommentedInstanceVariables`: Tests the generation of comments for instance variables.
  - `testAiCommentedMethod`: Tests the generation of comments for a single method.
  - `testAiCommentedMethods`: Tests the generation of comments for all methods in a class.

## Usage

To use the `AI-OllamaKasper` package, developers can extend their classes with AI-generated comments by calling the `addAIBasedComments` method on the `Behavior` class. This will generate and add comments for the class's methods and instance variables, enhancing code readability and maintainability.

## Conclusion

The `AI-OllamaKasper` package provides a powerful tool for integrating AI capabilities into the Pharo programming environment. By leveraging advanced AI models, it generates intelligent, context-aware comments that enhance code readability and maintainability. With its comprehensive suite of tests and seamless integration into the Pharo environment, this package offers a valuable addition to any Pharo developer's toolkit.
"
Class {
	#name : 'ManifestAIOllamaKasper',
	#superclass : 'PackageManifest',
	#category : 'AI-OllamaKasper-Manifest',
	#package : 'AI-OllamaKasper',
	#tag : 'Manifest'
}

{ #category : 'code-critics' }
ManifestAIOllamaKasper class >> ruleAssignmentInIfTrueRuleV1FalsePositive [

	<ignoreForCoverage>
	^ #(#(#(#RGPackageDefinition #(#'AI-OllamaKasper')) #'2025-04-30T09:58:59.39927+02:00') )
]

{ #category : 'code-critics' }
ManifestAIOllamaKasper class >> ruleCascadedNextPutAllsRuleV1FalsePositive [

	<ignoreForCoverage>
	^ #(#(#(#RGMethodDefinition #(#OllamaApiExperiments01 #femForAlleModeller #false)) #'2025-04-25T08:14:23.471243+02:00') )
]

{ #category : 'code-critics' }
ManifestAIOllamaKasper class >> ruleCodeCruftLeftInMethodsRuleV1FalsePositive [

	<ignoreForCoverage>
	^ #(#(#(#RGPackageDefinition #(#'AI-OllamaKasper')) #'2025-04-26T18:28:49.617821+02:00') )
]

{ #category : 'code-critics' }
ManifestAIOllamaKasper class >> ruleCollectionProtocolRuleV1FalsePositive [

	<ignoreForCoverage>
	^ #(#(#(#RGMethodDefinition #(#OllamaApiExperiments01 #femForAlleModeller #false)) #'2025-04-25T08:14:07.356408+02:00') #(#(#RGPackageDefinition #(#'AI-OllamaKasper')) #'2025-04-28T09:03:31.104576+02:00') )
]

{ #category : 'code-critics' }
ManifestAIOllamaKasper class >> ruleLongMethodsRuleV1FalsePositive [

	<ignoreForCoverage>
	^ #(#(#(#RGMethodDefinition #(#OllamaApiExperiments #writeAsHTML:toFile: #false)) #'2025-04-25T14:23:56.712667+02:00') #(#(#RGMethodDefinition #(#OllamaApiExperiments01 #writeAsHTML:toFile: #false)) #'2025-04-25T15:36:04.461195+02:00') #(#(#RGPackageDefinition #(#'AI-OllamaKasper')) #'2025-04-28T14:50:37.010799+02:00') )
]

{ #category : 'code-critics' }
ManifestAIOllamaKasper class >> ruleStringConcatenationRuleV1FalsePositive [

	<ignoreForCoverage>
	^ #(#(#(#RGMethodDefinition #(#OllamaApiExperiments01 #femForAlleModeller #false)) #'2025-04-25T08:14:19.855603+02:00') #(#(#RGPackageDefinition #(#'AI-OllamaKasper')) #'2025-04-30T09:59:05.951065+02:00') )
]

{ #category : 'code-critics' }
ManifestAIOllamaKasper class >> ruleUnclassifiedMethodsRuleV1FalsePositive [

	<ignoreForCoverage>
	^ #(#(#(#RGMethodDefinition #(#OllamaApiExperiments01 #femForAlleModeller #false)) #'2025-04-25T08:14:16.379263+02:00') #(#(#RGMethodDefinition #(#OllamaApiExperiments #html:on: #false)) #'2025-04-25T17:42:36.56681+02:00') )
]

{ #category : 'code-critics' }
ManifestAIOllamaKasper class >> ruleUsesWorldGlobalRuleV1FalsePositive [

	<ignoreForCoverage>
	^ #(#(#(#RGPackageDefinition #(#'AI-OllamaKasper')) #'2025-04-30T09:59:14.29659+02:00') )
]
