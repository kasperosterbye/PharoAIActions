"
#Ollama comment

kasper@Mac ollama % ollama run llama3.2:latest 
>>> /help
Available Commands:
  /set            Set session variables
  /show           Show model information
  /load <model>   Load a session or model
  /save <model>   Save your current session
  /clear          Clear session context
  /bye            Exit
  /?, /help       Help for a command
  /? shortcuts    Help for keyboard shortcuts

Use """""" to begin a multi-line message.

>>> /set
Available Commands:
  /set parameter ...     Set a parameter
  /set system <string>   Set system message
  /set history           Enable history
  /set nohistory         Disable history
  /set wordwrap          Enable wordwrap
  /set nowordwrap        Disable wordwrap
  /set format json       Enable JSON mode
  /set noformat          Disable formatting
  /set verbose           Show LLM stats
  /set quiet             Disable LLM stats

>>> /show
Available Commands:
  /show info         Show details for this model
  /show license      Show model license
  /show modelfile    Show Modelfile for this model
  /show parameters   Show parameters for this model
  /show system       Show system message
  /show template     Show prompt template

>>> /show info
  Model
    architecture        llama     
    parameters          3.2B      
    context length      131072    
    embedding length    3072      
    quantization        Q4_K_M    

  Parameters
    stop    ""<|start_header_id|>""    
    stop    ""<|end_header_id|>""      
    stop    ""<|eot_id|>""             

  License
    LLAMA 3.2 COMMUNITY LICENSE AGREEMENT                 
    Llama 3.2 Version Release Date: September 25, 2024    

>>> /show modelfile
# Modelfile generated by ""ollama show""
# To build a new Modelfile based on this, replace FROM with:
# FROM llama3.2:latest

FROM /Users/kasper/.ollama/models/blobs/sha256-dde5aa3fc5ffc17176b5e8bdc82f587b24b2678c6c66101bf7da77af9f7ccdff
TEMPLATE """"""<|start_header_id|>system<|end_header_id|>

Cutting Knowledge Date: December 2023

{{ if .System }}{{ .System }}
{{- end }}
{{- if .Tools }}When you receive a tool call response, use the output to format an answer to the orginal user question.

You are a helpful assistant with tool calling capabilities.
{{- end }}<|eot_id|>
{{- range $i, $_ := .Messages }}
{{- $last := eq (len (slice $.Messages $i)) 1 }}
{{- if eq .Role ""user"" }}<|start_header_id|>user<|end_header_id|>
{{- if and $.Tools $last }}

Given the following functions, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.

Respond in the format {""name"": function name, ""parameters"": dictionary of argument name and its value}. Do not use variables.

{{ range $.Tools }}
{{- . }}
{{ end }}
{{ .Content }}<|eot_id|>
{{- else }}

{{ .Content }}<|eot_id|>
{{- end }}{{ if $last }}<|start_header_id|>assistant<|end_header_id|>

{{ end }}
{{- else if eq .Role ""assistant"" }}<|start_header_id|>assistant<|end_header_id|>
{{- if .ToolCalls }}
{{ range .ToolCalls }}
{""name"": ""{{ .Function.Name }}"", ""parameters"": {{ .Function.Arguments }}}{{ end }}
{{- else }}

{{ .Content }}
{{- end }}{{ if not $last }}<|eot_id|>{{ end }}
{{- else if eq .Role ""tool"" }}<|start_header_id|>ipython<|end_header_id|>

{{ .Content }}<|eot_id|>{{ if $last }}<|start_header_id|>assistant<|end_header_id|>

{{ end }}
{{- end }}
{{- end }}""""""
PARAMETER stop <|start_header_id|>
PARAMETER stop <|end_header_id|>
PARAMETER stop <|eot_id|>
LICENSE ""LLAMA 3.2 COMMUNITY LICENSE AGREEMENT
Llama 3.2 Version Release Date: September 25, 2024 ....

>>> 
"
Class {
	#name : 'AI_KasperExperiments',
	#superclass : 'Object',
	#instVars : [
		'system',
		'prompt',
		'testResult',
		'testing'
	],
	#classInstVars : [
		'lastTest'
	],
	#category : 'AI-OllamaKasper',
	#package : 'AI-OllamaKasper'
}

{ #category : 'accessing' }
AI_KasperExperiments class >> lastTestModel [
	^ lastTest 
]

{ #category : 'tests' }
AI_KasperExperiments class >> testMethodBlackTestGenerator [
	"Tests all models with a simple prompt, returns collected responses"
	| model |
	model := self new.
	model 
		system: '' 
		prompt: 'In pharo or smalltal, I am looking for a good black test code for this method in class String. Can you give me a test method?:
		asComment
	"return this string, munged so that it can be treated as a comment in Smalltalk code.  Quote marks are added to the beginning and end of the string, and whenever a solitary quote mark appears within the string, it is doubled"

	^ String streamContents: [ :str |
		  | quoteCount first |
		  str nextPut: $".

		  quoteCount := 0.
		  first := true.
		  self withIndexDo: [ :char :index |
			  char = $"
				  ifTrue: [
					  (first or: (index = self size) ) ifFalse: [
						  str nextPut: char.
						  quoteCount := quoteCount + 1 ] ]
				  ifFalse: [
					  quoteCount odd ifTrue: [ "add a quote to even the number of quotes in a row"
						  str nextPut: $" ].
					  quoteCount := 0.
					  str nextPut: char ].
			  first := false ].
		
		   quoteCount odd
			  ifTrue: [ "check at the end" str nextPut: $" ].

		  str nextPut: $" ]
		'
		"testting: 'Codellama:7b'".
	model queryAllModels.
	^ model
	
]

{ #category : 'tests' }
AI_KasperExperiments class >> testMethodCommenting [
	"Tests all models with a simple prompt, returns collected responses"
	| model |
	model := self new.
	model 
		system: 'Short comments in Pharo and Smalltalk er one line, upto 60 characters. Medium comments are up to three lines, or upto 180 characters. Large comments should be less that 1000 characters.'
		prompt: 'Write short commentfor the following Pharo/Smalltalk method. Return only the comment, nothing more,
	resultForModel: modelName 
	| url jsonResponse requestBody |
	url := ''http://localhost:11434/api/generate''.

	requestBody := STONJSON toString: { 
	    #model -> modelName.
	    #system -> system.
	    #prompt -> prompt.
	    #stream -> false.
	} asDictionary.

	jsonResponse := ZnClient new
	    url: url;
	    entity: (ZnEntity with: requestBody);
	    post;
	    contents.

	^ (STONJSON fromString: jsonResponse) at: ''response''.
	'
		testting: 'phi4'. 
	model queryAllModels.
	^ model
	
]

{ #category : 'tests' }
AI_KasperExperiments class >> testMethodCommenting01 [
	"Tests all models with a simple prompt, returns collected responses"
	| model |
	model := self new.
	model 
		system: 'In Pharo and smalltalk the key comments of methods are 
		written in the line just after the method declaration. If you are asked to return 
		code, just return the code, no text for reading and explaining.' 
		prompt: 'This is a pharo and smalltalk method. Could you please read it.
		Insert one short comment into the method, and return the result of this. I want the code, not your thinking.
	resultForModel: modelName 
	| url jsonResponse requestBody |
	url := ''http://localhost:11434/api/generate''.

	requestBody := STONJSON toString: { 
	    #model -> modelName.
	    #system -> system.
	    #prompt -> prompt.
	    #stream -> false.
    	 #temperature -> 0.
	} asDictionary.

	jsonResponse := ZnClient new
	    url: url;
	    entity: (ZnEntity with: requestBody);
	    post;
	    contents.

	^ (STONJSON fromString: jsonResponse) at: ''response''.
'
		testting: 'Yi-Coder:9b'.. 
	model queryAllModels.
	^ model
	
]

{ #category : 'tests' }
AI_KasperExperiments class >> testMethodCommenting02 [
	"Tests all models with a simple prompt, returns collected responses"
	| model |
	model := self new.
	model 
		system: 'In Pharo and smalltalk comments of methods are 
		written in the line just after the method name and before the implementation.. If you are asked to return 
		code, just return the code, no text for reading and explaining.' 
		prompt: 'This is a pharo and smalltalk method. Could you please read it.
		Insert one short comment into the method, and return the result of this. I want the code, not your thinking.
	resultForModel: modelName 
	| url jsonResponse requestBody |
	url := ''http://localhost:11434/api/generate''.

	requestBody := STONJSON toString: { 
	    #model -> modelName.
	    #system -> system.
	    #prompt -> prompt.
	    #stream -> false.
	} asDictionary.

	jsonResponse := ZnClient new
	    url: url;
	    entity: (ZnEntity with: requestBody);
	    post;
	    contents.

	^ (STONJSON fromString: jsonResponse) at: ''response''.
	'
		testting: 'Yi-Coder:9b'.. 
	model queryAllModels.
	^ model
	
]

{ #category : 'tests' }
AI_KasperExperiments class >> testMethodCommenting03 [
	"Tests all models with a simple prompt, returns collected responses"
	| model |
	model := self new.
	model 
		system: 'Your task is to edit a given Pharo/Smalltalk method by inserting a single short comment at the appropriate place. 
Return only the modified code, without any explanations, extra text, or formatting. Do not add any other output.' 
		prompt: 'Modify the following Pharo/Smalltalk method by inserting a single short comment describing its purpose.
Return only the modified code and nothing else.
	resultForModel: modelName 
	| url jsonResponse requestBody |
	url := ''http://localhost:11434/api/generate''.

	requestBody := STONJSON toString: { 
	    #model -> modelName.
	    #system -> system.
	    #prompt -> prompt.
	    #stream -> false.
	} asDictionary.

	jsonResponse := ZnClient new
	    url: url;
	    entity: (ZnEntity with: requestBody);
	    post;
	    contents.

	^ (STONJSON fromString: jsonResponse) at: ''response''.
	'
		testting: 'phi4'. 
	model queryAllModels.
	^ model
	
]

{ #category : 'tests' }
AI_KasperExperiments class >> testMethodCommenting04 [
	"Tests all models with a simple prompt, returns collected responses"
	| model |
	model := self new.
	model 
		system: 'Short comments in Pharo and Smalltalk er one line, upto 60 characters. Medium comments are up to three lines, or upto 180 characters. Large comments should be less that 1000 characters.'
		prompt: 'Write a one line commentfor the following Pharo/Smalltalk method. Return only the comment and nothing else. Do not put it into the code, just return the comment as a "this is the comment". The comment should be one line, and upto 60 charaters. ,
	resultForModel: modelName 
	| url jsonResponse requestBody |
	url := ''http://localhost:11434/api/generate''.

	requestBody := STONJSON toString: { 
	    #model -> modelName.
	    #system -> system.
	    #prompt -> prompt.
	    #stream -> false.
	} asDictionary.

	jsonResponse := ZnClient new
	    url: url;
	    entity: (ZnEntity with: requestBody);
	    post;
	    contents.

	^ (STONJSON fromString: jsonResponse) at: ''response''.
	'
		testting: 'phi4'. 
	model queryAllModels.
	^ model
	
]

{ #category : 'tests' }
AI_KasperExperiments class >> testMethodPharoKnowledge [
	"Tests all models with a simple prompt, returns collected responses"
	| model |
	model := self new.
	model 
		system: '' 
		prompt: 'There is a programming language Pharo. Have you heard about it, and if so, what is the latest version you know of?'
		"testting: 'Codellama:7b'".
	lastTest := model.
	model queryAllModels.
	^ model
	
]

{ #category : 'tests' }
AI_KasperExperiments class >> testMethodUnderstanding [
	"Tests all models with a simple prompt, returns collected responses"
	| model |
	model := self new.
	model 
		system: '' 
		prompt: 'In pharo or smalltal, I am looking for a good comments about this method.
		Integer>>timesRepeat: aBlock
	| count |
	count := 1.
	[count <= self]
		whileTrue:
			[aBlock value.
			count := count + 1].
		Whould would be a good coment for this method in Pharo?'
		testting: 'Codellama:7b'.
	model queryAllModels.
	^ model
	
]

{ #category : 'tests' }
AI_KasperExperiments class >> testPharoOperatorModel [
	"Tests all models with a simple prompt, returns collected responses"
	| model |
	model := self new.
	model 
		system: 'In Smalltalk and Pharo, your instinct is wrong. All operators of more left to right, and operator name is ignored. 1+2*3 is read as (1+2)*3 result being 9! 2+3*4 = 20, 2+2*4=16, 9-3*10=60. 2+10/3=4. 20-12/4=2. I am a professor in these languages.' 
		prompt: 'In pharo and smalltal, is the result of 20+10/6 = (20+10)/6 left to ringt precedence or operators or 20+(10/6) wrong right to lefte precedence'
		testting: 'Codellama:7b'.
	model queryAllModels.
	^ model
	
]

{ #category : 'tests' }
AI_KasperExperiments class >> testSimpleAllModel [
	"Tests all models with a simple prompt, returns collected responses"
	| model |
	model := self new.
	model 
		system: '' 
		prompt: 'Do you have a name'. 
	model queryAllModels.
	^ model
	
]

{ #category : 'tests' }
AI_KasperExperiments class >> testSimpleModel [
	"Test a *single* model with a simple prompt and system."
	| model |
	model := self new.
	model 
		system: '' 
		prompt: 'Do you have a name' 
		testting: 'Codellama:7b'.
	model queryAllModels.
	^ model
	
]

{ #category : 'obsolete' }
AI_KasperExperiments >> modelSystemCheck [
	| models system results nl|
	models := self ollamaList.
	system := 'You are an expert in Pharo Smalltalk. In Pharo two argument operators are always executed in pairs from left to right, and +,-,*,/ are at the same level. Thus 1 + 2 * 3 is read as ( (1 + 2) * 3), giving the result of 9.'.
	results := String new.
	nl := '
'.
	1 to: models size do: [ :modelNumber |
		results := results , (models at: modelNumber), nl, nl, 
				(self ollama234: (models at: modelNumber) system: system), nl, nl.
		].
	^ results 
	
]

{ #category : 'obsolete' }
AI_KasperExperiments >> modelsStringToModelNames: aString [
    | lines firstWords |
    lines := aString lines.
    firstWords := lines collect: [ :line | 
        (line findFirst: [ :char | char = $ ]) 
            ifNil: [ '' ]  "Skip if no space is found"
            ifNotNil: [ :index | line copyFrom: 1 to: index - 1 ] ].  "Extract first word"
    
    ^ firstWords allButFirst.  "Remove the first word from the entire list"
]

{ #category : 'experimentation' }
AI_KasperExperiments >> ollama01 [
	| url jsonResponse requestBody |
	url := 'http://localhost:11434/api/generate'.

	requestBody := STONJSON toString: {
	    #model -> 'llama3.2'.
	    #prompt -> 'What is the color of the sun?'.
	    #stream -> false
	} asDictionary.

	jsonResponse := ZnClient new
	    url: url;
	    "contentType: 'application/json';"
	    entity: (ZnEntity with: requestBody);
	    post;
	    contents.

	"Parse JSON response into a Dictionary"
	^ (STONJSON fromString: jsonResponse) at: 'response'
]

{ #category : 'experimentation' }
AI_KasperExperiments >> ollama02: model [
	| url jsonResponse requestBody |
	url := 'http://localhost:11434/api/generate'.

	requestBody := STONJSON toString: {
	    #model -> model.
	    #prompt -> 'What is the color of the sun?'.
	    #stream -> false
	} asDictionary.

	jsonResponse := ZnClient new
	    url: url;
	    "contentType: 'application/json';"
	    entity: (ZnEntity with: requestBody);
	    post;
	    contents.

	"Parse JSON response into a Dictionary"
	^ (STONJSON fromString: jsonResponse) at: 'response'
]

{ #category : 'experimentation' }
AI_KasperExperiments >> ollama02: model prompt: prompt [
	| url jsonResponse requestBody |
	url := 'http://localhost:11434/api/generate'.

	requestBody := STONJSON toString: {
	    #model -> model.
	    #prompt -> prompt.
	    #stream -> false
	} asDictionary.

	jsonResponse := ZnClient new
	    url: url;
	    "contentType: 'application/json';"
	    entity: (ZnEntity with: requestBody);
	    post;
	    contents.

	"Parse JSON response into a Dictionary"
	^ (STONJSON fromString: jsonResponse) at: 'response'
]

{ #category : 'obsolete' }
AI_KasperExperiments >> ollama234: modelName system: system [
	| url jsonResponse requestBody |
	url := 'http://localhost:11434/api/generate'.

	requestBody := STONJSON toString: { 
	    #model -> modelName.
	    #system -> system.
	    #prompt -> 'What is 2 + 3 * 4 in Pharo?'. "Test if the SYSTEM message is applied"
	    #stream -> false.
	} asDictionary.

	jsonResponse := ZnClient new
	    url: url;
	    entity: (ZnEntity with: requestBody);
	    post;
	    contents.

	^ (STONJSON fromString: jsonResponse) at: 'response'.
]

{ #category : 'experimentation' }
AI_KasperExperiments >> ollamaInternal [
	| url jsonResponse requestBody |
	url := 'http://localhost:11434/api/tags'.

	requestBody := STONJSON toString: {
	    #model -> 'llama3.2'.
	    #prompt -> '/help'.
	    #stream -> false
	} asDictionary.

	jsonResponse := ZnClient new
	    url: url;
	    "contentType: 'application/json';"
	    entity: (ZnEntity with: requestBody);
	    post;
	    contents.

	"Parse JSON response into a Dictionary"
	^ (STONJSON fromString: jsonResponse) at: 'response'
]

{ #category : 'experimentation' }
AI_KasperExperiments >> ollamaInternal2 [
	| url jsonResponse |
	url := 'http://localhost:11434/api/tags'.
	jsonResponse := ZnClient new
	    url: url;
	    get;
	    contents.

	"Parse JSON response"
	^(STONJSON fromString: jsonResponse) at: 'models'.
]

{ #category : 'experimentation' }
AI_KasperExperiments >> ollamaInternalShow [
	| url jsonResponse  requestBody modelName |
	modelName := 'llama3.2'. "Change this to any installed model"

	url := 'http://localhost:11434/api/show'.

	requestBody := STONJSON toString: { 
	    #name -> modelName 
	} asDictionary.

	jsonResponse := ZnClient new
	    url: url;
	    entity: (ZnEntity with: requestBody);
	    post;
	    contents.

	"Parse JSON response"
		^ STONJSON fromString: jsonResponse.
]

{ #category : 'experimentation' }
AI_KasperExperiments >> ollamaInternalSystem [
	| url jsonResponse requestBody modelName |
	modelName := 'llama3.2'. "Your selected model"

	url := 'http://localhost:11434/api/generate'.

	requestBody := STONJSON toString: { 
	    #model -> modelName.
	    #system -> 'You are an expert in Pharo Smalltalk. In Pharo two argument operators are always executed in pairs from left to right, and +,-,*,/ are at the same level. Thus 1 + 2 * 3 is read as ( (1 + 2) * 3), giving the result of 9.'.
	    #prompt -> 'What is 10-4*2 in Pharo?'. "Test if the SYSTEM message is applied"
	    #stream -> false.
	} asDictionary.

	jsonResponse := ZnClient new
	    url: url;
	    entity: (ZnEntity with: requestBody);
	    post;
	    contents.

	^ (STONJSON fromString: jsonResponse) at: 'response'.
]

{ #category : 'experimentation' }
AI_KasperExperiments >> ollamaInternalSystemOld [
	| url jsonResponse requestBody modelName |
	modelName := 'llama3.2'. "Your selected model"

	url := 'http://localhost:11434/api/generate'.

	requestBody := STONJSON toString: { 
	    #model -> modelName.
	    #system -> 'You are an expert in Pharo Smalltalk. Assume all questions and code refer to Pharo unless explicitly stated otherwise.'.
	    #prompt -> 'What is 2 + 3 * 4 in Pharo?'. "Test if the SYSTEM message is applied"
	    #stream -> false.
	} asDictionary.

	jsonResponse := ZnClient new
	    url: url;
	    entity: (ZnEntity with: requestBody);
	    post;
	    contents.

	^ (STONJSON fromString: jsonResponse) at: 'response'.
]

{ #category : 'experimentation' }
AI_KasperExperiments >> ollamaInternalTags [
	| url jsonResponse |
	url := 'http://localhost:11434/api/tags'.
	jsonResponse := ZnClient new
	    url: url;
	    get;
	    contents.

	"Parse JSON response"
	^(STONJSON fromString: jsonResponse) at: 'models'.
]

{ #category : 'ollama models' }
AI_KasperExperiments >> ollamaList [
	"Ask ollama for its list of model names, return them"
	| res |
	testing ifNotNil: [ ^  { testing }].
	res := (LibC resultOfCommand: 'ollama list') lines allButFirst.
	^res collect: [:model | model copyUpToSubstring: ' ' ].
]

{ #category : 'ollama models' }
AI_KasperExperiments >> queryAllModels [
	"Iterates over all available Ollama models and queries each with the predefined system message and prompt.
	Stores the responses in the modelResults slot for comparison and analysis.
	Assumes that the list of models is already populated before calling this method."
	
	testResult := Dictionary new.
	self ollamaList do: [ : model | 
		testResult at: model put: (self resultForModel: model)
		].
	
]

{ #category : 'ollama models' }
AI_KasperExperiments >> restults [
	| string cr|
	cr := Character cr asString.
	string := 'Testing with', cr, 'SYSTEM: ', system, cr, 'PROMT: ', prompt, 
		cr, '=================', cr, cr.
	
	testResult keysAndValuesDo: [ :model :result |
		string := string, model, cr, '------------', cr, result, cr, cr
		].
	^ string
]

{ #category : 'ollama models' }
AI_KasperExperiments >> resultForModel: modelName [ 
	| url jsonResponse requestBody |
	url := 'http://localhost:11434/api/generate'.

	requestBody := STONJSON toString: { 
	    #model -> modelName.
	    #system -> system.
	    #prompt -> prompt.
	    #stream -> false.
    	 #temperature -> 0.
	} asDictionary.

	jsonResponse := ZnClient new
	    url: url;
	    entity: (ZnEntity with: requestBody);
	    post;
	    contents.

	^ (STONJSON fromString: jsonResponse) at: 'response'.

]

{ #category : 'obsolete' }
AI_KasperExperiments >> setSystemFormat: aSystemText [
	"System format is a list of facts included in all calls to ollama model"
	system := aSystemText 
]

{ #category : 'ollama models' }
AI_KasperExperiments >> system: sys prompt: pro [
	"initialize system and prompt"
	system := sys.
	prompt := pro 
]

{ #category : 'ollama models' }
AI_KasperExperiments >> system: sys prompt: pro testting: model [
	"initialize system and prompt"
	self system: sys prompt: pro.
	testing := model.
]
