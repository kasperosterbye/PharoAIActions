"
# Class Comment for AilienApi

## AilienApi

**AilienApi** is a class designed to interact with an AI API, specifically for managing and utilizing AI models. This class provides a structured way to handle AI-related operations, including setting and retrieving model information, system prompts, user prompts, and responses.

### Key Features

- **Model Management**: Allows setting and retrieving the AI model to be used.
- **System and User Prompts**: Facilitates the management of system and user prompts that guide the AI model's responses.
- **Response Handling**: Provides methods to set and retrieve the responses generated by the AI model.
- **Initialization**: Ensures that all instance variables are properly initialized when an instance of the class is created.

### Usage

To use the `AilienApi` class, you typically follow these steps:

1. **Create an Instance**: Instantiate the `AilienApi` class.
2. **Set Model**: Use the `model:` method to set the AI model you wish to use.
3. **Set Prompts**: Use the `system:` and `prompt:` methods to set the system and user prompts, respectively.
4. **Retrieve Response**: Use the `response:` method to set the response generated by the AI model and the `response` method to retrieve it.

### Example

```smalltalk
| api |
api := AilienApi new.
api model: 'gpt-3.5-turbo'.
api system: 'You are a helpful assistant.'.
api prompt: 'What is the capital of France?'.
api response: 'The capital of France is Paris.'.
Transcript show: api response. ""Output: The capital of France is Paris.""
```

### Subclassing

The `AilienApi` class is designed to be subclassed. Subclasses should implement the `models` method to return a list of available models from the API. The `modelNames` method can be used to retrieve the names of these models.

### Note

This class is part of the `AIActions` package and is tagged with `AIApi`.

---

This class comment provides a comprehensive overview of the `AilienApi` class, its features, usage, and guidelines for subclassing. It ensures that users and developers have a clear understanding of how to interact with and extend the class.
"
Class {
	#name : 'AilienApi',
	#superclass : 'Object',
	#instVars : [
		'model',
		'system',
		'prompt',
		'response'
	],
	#category : 'AIActions-AIApi',
	#package : 'AIActions',
	#tag : 'AIApi'
}

{ #category : 'AI models' }
AilienApi class >> modelNames [
	"returns an array with one item per model."
	^ self models collect: [ :model | model at: 'name' ]
]

{ #category : 'accessing' }
AilienApi class >> models [
	"Subclasses should implement this to return a list of available models from the API"
	self subclassResponsibility
]

{ #category : 'initialization' }
AilienApi >> initialize [ 
	super initialize.
	self model: ''.
	self system: ''.
	self prompt: ''.
	self response: ''
]

{ #category : 'accessing' }
AilienApi >> model [

	^ model
]

{ #category : 'accessing' }
AilienApi >> model: anObject [

	model := anObject
]

{ #category : 'accessing' }
AilienApi >> prompt [

	^ prompt
]

{ #category : 'accessing' }
AilienApi >> prompt: anObject [

	prompt := anObject
]

{ #category : 'accessing' }
AilienApi >> response [

	^ response
]

{ #category : 'accessing' }
AilienApi >> response: anObject [

	response := anObject
]

{ #category : 'accessing' }
AilienApi >> system [

	^ system
]

{ #category : 'accessing' }
AilienApi >> system: anObject [

	system := anObject
]
