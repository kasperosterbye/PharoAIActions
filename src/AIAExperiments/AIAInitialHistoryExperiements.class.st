"
# Class Comment for AIAInitialHistoryExperiements

The `AIAInitialHistoryExperiements` class is designed to explore the impact of different Chat history structures on the responses generated by various Large Language Models (LLMs). The experiments focus on the use of system messages in the Chat history and their effect on the LLM's responses.

## Key Features

- **System vs. User Instructions**: Tests the difference between using system messages and user messages to provide instructions to the LLM.
- **Background Context**: Evaluates how providing background context (such as source code) affects the LLM's responses.
- **Response Analysis**: Compares the responses from different LLMs to identify patterns and differences in their behaviour.

## Usage Example

The following example demonstrates how to run a system test for a specific LLM model and inspect the results:

```st
""Create an instance of the experiment class""
experiment := AIAInitialHistoryExperiements new.

""Run a system test for a specific LLM model (e.g., MistralApi)""
experiment systemTestFor: MistralApi.

""Inspect the results""
experiment llmResults
```

This will execute a system test using the specified LLM model and store the results in the `llmResults` instance variable, which can then be inspected.

## Design Decisions

- **Fluid Syntax**: The class is designed to support fluid syntax for easy scripting and interactive use.
- **Class Builder**: The class builder pattern is used to create and manage class definitions without immediately installing them in the system.
- **Comparison**: The class can compare old and new class definitions to determine the required changes for installation.
- **Extensibility**: The class can be extended by using different builder enhancers to customise the class creation process.

## Future Improvements

- **API Alignment**: Revisit the API to align it more closely with the default values of the class.
- **Builder Refinement**: Consider revisiting the need for fluid class builders and refining their API for better usability and maintainability.

This class is part of the `AIAExperiments` package and is tagged with 'HistoryExperiements'.
```
"
Class {
	#name : 'AIAInitialHistoryExperiements',
	#superclass : 'Object',
	#instVars : [
		'providersOfAIModels',
		'llmResults',
		'markDown'
	],
	#category : 'AIAExperiments-HistoryExperiements',
	#package : 'AIAExperiments',
	#tag : 'HistoryExperiements'
}

{ #category : 'as yet unclassified' }
AIAInitialHistoryExperiements class >> conclusionOfSystemTest: aStream [
	aStream 
		<< String cr << '## Conclusion' << String cr 
		<< 'As can be seen they all but the last answers that they do not know the correct answer. '
		<< 'That is because none of them knows the meaning of the name `AIATestBuilder` (as expected).' 
		<< String cr
		<< 'This means that the instructions to '
		<< '`Give short answers. If you are not 100 percent sure, just say "I do not know"` '
		<< 'or `Give short answers. If you are not 100 percent sure, just say '
		<< '"Killroy was here, and he do not know"` '
		<< 'And this seems to work both for it inserted into the system, or as a user instruction. '
		<< 'Actually, it can be part of the instructions in the Chat history to specify what to say '
		<< 'if the LLM is no sure. That means that one can in the code look to see if that '
		<< 'word is the response, and act based on that '
]

{ #category : 'as yet unclassified' }
AIAInitialHistoryExperiements class >> old_conclusionOfSystemTest: aStream [
	"Should be changed so it is an AI that constructs the result"
	aStream 
		<< String cr << '## Conclusion' << String cr 
		<< 'As can be seen they all but the last answers that they do not know the correct answer. '
		<< 'That is because none of them knows the meaning of the name `AIATestBuilder` (as expected).' 
		<< String cr
		<< 'This means that the instructions to '
		<< '`Give short answers. If you are not 100 percent sure, just say "I do not know"` '
		<< 'or `Give short answers. If you are not 100 percent sure, just say '
		<< '"Killroy was here, and he do not know"` '
		<< 'And this seems to work both for it inserted into the system, or as a user instruction. '
		<< 'Actually, it can be part of the instructions in the Chat history to specify what to say '
		<< 'if the LLM is no sure. That means that one can in the code look to see if that '
		<< 'word is the response, and act based on that '
]

{ #category : 'as yet unclassified' }
AIAInitialHistoryExperiements class >> resultsStreamOn: aStream [
	aStream << '# Stream tests in History experiments' << String cr
	<< '> Author & system developer: Kasper Ã˜sterbye' << String cr 
	<< '> Position: Retired Computerscience workder from Aalborg, Aarhus, and ITU' 
	<< String cr << String cr 
	<< 'The structure of the Chat are many, but at the core is a history of user (who ask the question) and assistant (the LLM response). But some Chat APIs allows the first element in the history to be `system`, which is the background of the Chat.' 
	<< String cr << String cr
	<< 'Two examples have been used to explore this simple issue. The first uses a `system` part of the background, conretely this method: (see table 1)' << String cr 
	<< '
	aaa := AIACommentBuilding ailienApi new.
	"uses SYSTEM"
	aaa system: ''Give short answers. If you are not 100 percent sure, just say "I do not know"''.
	aaa user: ''What is the instance variable of AIATestBuilder.''.
	aaa getResponse.
	'
	<< String cr << String cr 
	<< 'And the other does not use system, but is this method: (see table 2)' << String cr 
	<< '
	aaa := AIACommentBuilding ailienApi new.
	"does not use SYSTEM"
	aaa user: ''Give short answers. If you are not 100 percent sure, just say "Killroy was here, and he do not know"''.
	aaa assistant: ''Will follow those instructions''. "Each user prompt must have a assistant response"
	aaa user: ''What is the instance variable of AIATestBuilder.''.
	'
	<< String cr << String cr .
]

{ #category : 'as yet unclassified' }
AIAInitialHistoryExperiements >> backgroundTest [
	| tables |
	llmResults := OrderedCollection new.
	providersOfAIModels do: [ :l | self userBackgroundGivingTestFor: l ].
	
	self class resultsStreamOn: markDown.
	tables := WriteStream on: ''.
	tables
		<< '| LLM model | Response |' << String cr
		<< '|----|----|' << String cr.
	llmResults do: [ :llmAndResult |
		tables << '| ' << llmAndResult first name << ' | ' << llmAndResult second << ' | ' << String cr
		 ].
	markDown << String cr << tables contents << String cr.
	AIACommentPresenter onText: markDown contents.
	^ markDown contents
]

{ #category : 'as yet unclassified' }
AIAInitialHistoryExperiements >> cleanString: aString [
	| clean |
	clean := aString copyReplaceAll: String cr with: ' '.
	clean := clean copyReplaceAll: String lf with: ' '.
	^ clean
]

{ #category : 'as yet unclassified' }
AIAInitialHistoryExperiements >> f01_noSystemTestFor: llmModel [

	| aaa |
	AIACommentBuilding ailienApi: llmModel.
	aaa := AIACommentBuilding ailienApi new.
	aaa user: 'Give short answers. Only answer if 100% certain. Otherwise say: "No valid answer. Skipped."'.
	aaa assistant: 'Will follow those instructions'. "Each user prompt must have a assistant response"
	aaa user: 'What is the instance variable of AIATestBuilder.'.
	aaa getResponse.
	
	llmResults add: {llmModel . llmModel defaultModel .(self cleanString: aaa response )}
	
]

{ #category : 'as yet unclassified' }
AIAInitialHistoryExperiements >> f02_noSystemTestFor: llmModel [

	| aaa |
	AIACommentBuilding ailienApi: llmModel.
	aaa := AIACommentBuilding ailienApi new.
	aaa user: 'Give short answers. If unsure, reply exactly: "Answer unavailable. Do not guess."'.
	aaa assistant: 'Will follow those instructions'. "Each user prompt must have a assistant response"
	aaa user: 'What is the instance variable of AIATestBuilder.'.
	aaa getResponse.
	
	llmResults add: {llmModel . llmModel defaultModel .(self cleanString: aaa response )}
	
]

{ #category : 'initialization' }
AIAInitialHistoryExperiements >> initialize [ 
	providersOfAIModels := {MistralApi .  GeminiApi. ClaudeApi". OllamaApi" }.
	markDown := WriteStream on: ''
]

{ #category : 'as yet unclassified' }
AIAInitialHistoryExperiements >> noSystemTestFor: llmModel [

	| aaa |
	AIACommentBuilding ailienApi: llmModel.
	aaa := AIACommentBuilding ailienApi new.
	aaa user: 'Give short answers. If you''re not completely sure, say: ''The oracle is silent.'''.
	aaa assistant: 'Will follow those instructions'. "Each user prompt must have a assistant response"
	aaa user: 'What is the instance variable of AIATestBuilder.'.
	aaa getResponse.
	
	llmResults add: {llmModel . llmModel defaultModel .(self cleanString: aaa response )}
	
]

{ #category : 'as yet unclassified' }
AIAInitialHistoryExperiements >> old_results01 [
	| tables |
	llmResults := OrderedCollection new.
	self halt.
	providersOfAIModels do: [ :l |
		self halt.
		1 to: 3 do: [:ignore | self systemTestFor: l ]].
	
	tables := WriteStream on: ''.
	tables
		<< '| LLM model | Response |' << String cr
		<< '|----|----|' << String cr.
	llmResults do: [ :llmAndResult |
		tables << '| ' << llmAndResult first name << ' | ' << llmAndResult second << ' | ' << String cr
		 ].
	markDown << String cr << tables contents << String cr.
	^ tables contents
]

{ #category : 'as yet unclassified' }
AIAInitialHistoryExperiements >> results01 [
	| tables |
	llmResults := OrderedCollection new.
	providersOfAIModels do: [ :l |
		1 to: l noOfModels do: [:modelNumber | 
			l defaultModel: modelNumber.
			self systemTestFor: l ]].
	
	tables := WriteStream on: ''.
	tables
		<< '| AIProvider | Model | Response |' << String cr
		<< '|----|----|----|' << String cr.
	llmResults do: [ :llmAndResult | 
		tables << '| ' << llmAndResult first name 
				<< ' | ' << llmAndResult second  
				<< ' | ' << llmAndResult third 
				<< ' | ' << String cr
		 ].
	markDown << String cr << tables contents << String cr.
	^ tables contents
]

{ #category : 'as yet unclassified' }
AIAInitialHistoryExperiements >> results02 [
	| tables |
	llmResults := OrderedCollection new.
	providersOfAIModels do: [ :l |
		1 to: l noOfModels do: [:modelNumber | 
			l defaultModel: modelNumber.
			self noSystemTestFor: l ]].
	
	tables := WriteStream on: ''.
	tables
		<< '| AIProvider | Model | Response |' << String cr
		<< '|----|----|----|' << String cr.
	llmResults do: [ :llmAndResult | 
		tables << '| ' << llmAndResult first name 
				<< ' | ' << llmAndResult second  
				<< ' | ' << llmAndResult third 
				<< ' | ' << String cr
		 ].
	markDown << String cr << tables contents << String cr.
	^ tables contents
]

{ #category : 'as yet unclassified' }
AIAInitialHistoryExperiements >> resultsSystemTest [
	"Runs system tests for all LLM models in llmSet, compares results, and displays them in a markdown table. Uses resultsStreamOn: and conclusionOfSystemTest: to format output. Displays results using AIACommentPresenter."
	| tables1 tables2 |
	self class resultsStreamOn: markDown.
	
	tables1 := self results01.
	tables2 := self results02.
	self class conclusionOfSystemTest: markDown.
	AIACommentPresenter onText: markDown contents.
	^ markDown contents
]

{ #category : 'as yet unclassified' }
AIAInitialHistoryExperiements >> systemTestFor: llmModel [

	| aaa |
	AIACommentBuilding ailienApi: llmModel.
	aaa := AIACommentBuilding ailienApi new.
	aaa system: 'Give short answers. Only answer if 100% certain. Otherwise say: "No valid answer. Skipped."'.
	aaa user: 'What is the instance variable of AIATestBuilder.'.
	aaa getResponse.
	llmResults add: {llmModel . llmModel defaultModel . (self cleanString: aaa response )}
	
]

{ #category : 'as yet unclassified' }
AIAInitialHistoryExperiements >> userBackgroundGivingTestFor: llmModel [

	| aaa |
	AIACommentBuilding ailienApi: llmModel.
	aaa := AIACommentBuilding ailienApi new.
	aaa user: 'Give short answers. If you are not 100 percent sure, just say "I do not know"'.
	aaa assistant: 'Will follow those instructions'.
	aaa user: (AIASourceCodeBuilder new forClass: AIATestBuilder).
	aaa assistant: 'Ahh, Pharo code for the class AIATestBuilder, written in MarkDown style'.
	aaa user: 'What is the instance specific instance variable of AIATestBuilder.'.
	aaa getResponse.

	llmResults add: {
			llmModel.
			(self cleanString: aaa response) }
]
